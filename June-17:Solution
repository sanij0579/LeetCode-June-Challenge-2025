3405. Count the Number of Arrays with K Matching Adjacent Elements
Solution:
class Solution:
    def countGoodArrays(self, length: int, colorCount: int, colorChangeCount: int) -> int:
        # Solution 2: Slightly More Efficient
        MOD = 10**9 + 7
        totalChanges = length - 1
        
        if colorChangeCount > totalChanges:
            return 0

        r = colorChangeCount
        combination = 1

        if r > totalChanges - r:
            r = totalChanges - r

        if r:
            inverse = [0] * (r + 1)
            inverse[1] = 1
            for i in range(2, r + 1):
                inverse[i] = MOD - (MOD // i) * inverse[MOD % i] % MOD
            for i in range(1, r + 1):
                combination = combination * (totalChanges - r + i) % MOD * inverse[i] % MOD

        return colorCount * combination % MOD * pow(colorCount - 1, totalChanges - colorChangeCount, MOD) % MOD

        # Solution  Using Precomputed Factorials

        def comb(n: int, r: int) -> int:
            if 0 <= r <= n:
                return fact[n] * invFact[r] % MOD * invFact[n - r] % MOD
            return 0

        if colorChangeCount > length - 1:
            return 0

        fact = [1] * length
        for i in range(1, length):
            fact[i] = fact[i - 1] * i % MOD

        invFact = [1] * length
        invFact[length - 1] = pow(fact[length - 1], MOD - 2, MOD)
        for i in range(length - 1, 0, -1):
            invFact[i - 1] = invFact[i] * i % MOD

        return colorCount * comb(length - 1, colorChangeCount) % MOD * pow(colorCount - 1, length - 1 - colorChangeCount, MOD) % MOD
